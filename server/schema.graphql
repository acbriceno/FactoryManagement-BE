scalar DateTime

type Query {
	info: String!
	messages: [Message!]!
	machines: [Machine!]!
}

type Mutation {
	sendMessage(subject: String!, body: String!, recipients: [String!]): Message!
	signup(username: String!, name:String!, password: String!, role: Role!): AuthPayload
	login(username: String!, password: String!): AuthPayload
	addMachine(name: String!, manufacturer: String!, year: Int, model: String!, serialNumber: String!, lastServiceDate: DateTime, nextServiceDate: DateTime, onlineStatus: Boolean!): Machine!
	
}

type Message {
	id: ID!
	subject: String!
	body: String!
	sender: User!
	recipients: [User!]!
}

type AuthPayload {
	token: String
	user: User
}

type User {
	id: ID!
	username: String!
	name: String!
	inbox: [Message!]!
	outbox: [Message!]!
	role: Role!
}

type Machine {
	id: ID!
	name: String!
	manufacturer: String!
	year: Int
	model: String!
	serialNumber: String! 
	lastServiceDate: DateTime
	nextServiceDate: DateTime
	onlineStatus: Boolean!
}

enum Role {
USER
ADMIN
ADMINVIEW
}